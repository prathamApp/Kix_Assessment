//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.kix.assessment.async;

import android.content.Context;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.UiThreadExecutor;

public final class PushDataBaseZipToServer_
    extends PushDataBaseZipToServer
{
    private Context context_;
    private Object rootFragment_;

    private PushDataBaseZipToServer_(Context context) {
        super(context);
        context_ = context;
        init_();
    }

    private PushDataBaseZipToServer_(Context context, Object rootFragment) {
        super(context);
        context_ = context;
        rootFragment_ = rootFragment;
        init_();
    }

    public static PushDataBaseZipToServer_ getInstance_(Context context) {
        return new PushDataBaseZipToServer_(context);
    }

    public static PushDataBaseZipToServer_ getInstance_(Context context, Object rootFragment) {
        return new PushDataBaseZipToServer_(context, rootFragment);
    }

    private void init_() {
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void showPushDialog(final Context context) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataBaseZipToServer_.super.showPushDialog(context);
            }
        }
        , 0L);
    }

    @Override
    public void startDataBasePush(final Context context, final boolean showUi) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    PushDataBaseZipToServer_.super.startDataBasePush(context, showUi);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }
}
