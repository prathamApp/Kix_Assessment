//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.contentPlayer.doing;

import java.util.HashMap;
import java.util.Map;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import com.pratham.foundation.R;
import org.androidannotations.api.UiThreadExecutor;
import org.androidannotations.api.bean.BeanHolder;
import org.androidannotations.api.builder.FragmentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class DoingFragment_
    extends com.pratham.foundation.ui.contentPlayer.doing.DoingFragment
    implements BeanHolder, HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private final Map<Class<?> , Object> beans_ = new HashMap<Class<?> , Object>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T)((contentView_ == null)?null:contentView_.findViewById(id)));
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(R.layout.layout_video_row, container, false);
        }
        return contentView_;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        contentView_ = null;
        question = null;
        questionImage = null;
        iv_playvid = null;
        vv_question = null;
        capture = null;
        reset_btn = null;
        preview = null;
        submitBtn = null;
        previous = null;
        next = null;
        sub_questions_container = null;
        relativeLayout = null;
        camera_controll = null;
        subQuestion = null;
        etAnswer = null;
        ib_mic = null;
        ll_edit_text = null;
        et_edit_ans = null;
        bt_edit_ok = null;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.presenter = DoingFragmentPresenter_.getInstance_(getActivity(), this);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static DoingFragment_.FragmentBuilder_ builder() {
        return new DoingFragment_.FragmentBuilder_();
    }

    @Override
    public<T> T getBean(Class<T> key) {
        return ((T) beans_.get(key));
    }

    @Override
    public<T> void putBean(Class<T> key, T value) {
        beans_.put(key, value);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.question = hasViews.internalFindViewById(R.id.tv_question);
        this.questionImage = hasViews.internalFindViewById(R.id.iv_question_image);
        this.iv_playvid = hasViews.internalFindViewById(R.id.iv_playvid);
        this.vv_question = hasViews.internalFindViewById(R.id.vv_question);
        this.capture = hasViews.internalFindViewById(R.id.capture);
        this.reset_btn = hasViews.internalFindViewById(R.id.reset_btn);
        this.preview = hasViews.internalFindViewById(R.id.preview);
        this.submitBtn = hasViews.internalFindViewById(R.id.submit);
        this.previous = hasViews.internalFindViewById(R.id.previous);
        this.next = hasViews.internalFindViewById(R.id.next);
        this.sub_questions_container = hasViews.internalFindViewById(R.id.sub_questions_container);
        this.relativeLayout = hasViews.internalFindViewById(R.id.relativeLayout);
        this.camera_controll = hasViews.internalFindViewById(R.id.camera_controll);
        this.subQuestion = hasViews.internalFindViewById(R.id.subQuestion);
        this.etAnswer = hasViews.internalFindViewById(R.id.answer);
        this.ib_mic = hasViews.internalFindViewById(R.id.btn_read_mic);
        this.ll_edit_text = hasViews.internalFindViewById(R.id.ll_edit_text);
        this.et_edit_ans = hasViews.internalFindViewById(R.id.et_edit_ans);
        this.bt_edit_ok = hasViews.internalFindViewById(R.id.bt_edit_ok);
        if (this.ib_mic!= null) {
            this.ib_mic.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.onMicClicked();
                }
            }
            );
        }
        if (this.previous!= null) {
            this.previous.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.onPreviousClick();
                }
            }
            );
        }
        if (this.reset_btn!= null) {
            this.reset_btn.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.reset();
                }
            }
            );
        }
        if (this.bt_edit_ok!= null) {
            this.bt_edit_ok.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.editOKClicked();
                }
            }
            );
        }
        if (this.next!= null) {
            this.next.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.onNextClick();
                }
            }
            );
        }
        if (this.questionImage!= null) {
            this.questionImage.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.onVideoClicked();
                }
            }
            );
        }
        if (this.iv_playvid!= null) {
            this.iv_playvid.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.onVideoClicked();
                }
            }
            );
        }
        if (this.capture!= null) {
            this.capture.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.captureClick();
                }
            }
            );
        }
        if (this.preview!= null) {
            this.preview.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.previewClick();
                }
            }
            );
        }
        if (this.submitBtn!= null) {
            this.submitBtn.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    DoingFragment_.this.submitClick();
                }
            }
            );
        }
        initiate();
    }

    @Override
    public void dismissLoadingDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                DoingFragment_.super.dismissLoadingDialog();
            }
        }
        , 0L);
    }

    public static class FragmentBuilder_
        extends FragmentBuilder<DoingFragment_.FragmentBuilder_, com.pratham.foundation.ui.contentPlayer.doing.DoingFragment>
    {

        @Override
        public com.pratham.foundation.ui.contentPlayer.doing.DoingFragment build() {
            DoingFragment_ fragment_ = new DoingFragment_();
            fragment_.setArguments(args);
            return fragment_;
        }
    }
}
