//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.contentPlayer.paragraph_stt;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import com.pratham.foundation.R;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.UiThreadExecutor;
import org.androidannotations.api.bean.BeanHolder;
import org.androidannotations.api.builder.FragmentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class STTQuestionsFragment_
    extends com.pratham.foundation.ui.contentPlayer.paragraph_stt.STTQuestionsFragment
    implements BeanHolder, HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private final Map<Class<?> , Object> beans_ = new HashMap<Class<?> , Object>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T)((contentView_ == null)?null:contentView_.findViewById(id)));
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(R.layout.fragment_stt_questions, container, false);
        }
        return contentView_;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        contentView_ = null;
        wordFlowLayout = null;
        story_title = null;
        stt_ans_tv = null;
        btn_prev = null;
        reset_btn = null;
        btn_next = null;
        ib_mic = null;
        btn_speaker = null;
        myScrollView = null;
        submit = null;
        story_ll = null;
        silence_outer_layout = null;
        silence_main_layout = null;
        silence_iv = null;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.presenter = STTQuestionsPresenter_.getInstance_(getActivity(), this);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static STTQuestionsFragment_.FragmentBuilder_ builder() {
        return new STTQuestionsFragment_.FragmentBuilder_();
    }

    @Override
    public<T> T getBean(Class<T> key) {
        return ((T) beans_.get(key));
    }

    @Override
    public<T> void putBean(Class<T> key, T value) {
        beans_.put(key, value);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.wordFlowLayout = hasViews.internalFindViewById(R.id.myflowlayout);
        this.story_title = hasViews.internalFindViewById(R.id.tv_story_title);
        this.stt_ans_tv = hasViews.internalFindViewById(R.id.stt_ans_tv);
        this.btn_prev = hasViews.internalFindViewById(R.id.btn_prev);
        this.reset_btn = hasViews.internalFindViewById(R.id.reset_btn);
        this.btn_next = hasViews.internalFindViewById(R.id.btn_next);
        this.ib_mic = hasViews.internalFindViewById(R.id.ib_mic);
        this.btn_speaker = hasViews.internalFindViewById(R.id.btn_speaker);
        this.myScrollView = hasViews.internalFindViewById(R.id.myScrollView);
        this.submit = hasViews.internalFindViewById(R.id.submit);
        this.story_ll = hasViews.internalFindViewById(R.id.story_ll);
        this.silence_outer_layout = hasViews.internalFindViewById(R.id.silence_outer);
        this.silence_main_layout = hasViews.internalFindViewById(R.id.silence_main_layout);
        this.silence_iv = hasViews.internalFindViewById(R.id.silence_iv);
        View view_btn_Stop = hasViews.internalFindViewById(R.id.btn_Stop);
        View view_hint_btn = hasViews.internalFindViewById(R.id.hint_btn);

        if (view_btn_Stop!= null) {
            view_btn_Stop.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    STTQuestionsFragment_.this.stopBtn();
                }
            }
            );
        }
        if (this.reset_btn!= null) {
            this.reset_btn.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    STTQuestionsFragment_.this.resetBtn();
                }
            }
            );
        }
        if (view_hint_btn!= null) {
            view_hint_btn.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    STTQuestionsFragment_.this.showHint();
                }
            }
            );
        }
        if (this.btn_speaker!= null) {
            this.btn_speaker.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    STTQuestionsFragment_.this.readAnswer();
                }
            }
            );
        }
        if (this.ib_mic!= null) {
            this.ib_mic.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    STTQuestionsFragment_.this.sttMethod();
                }
            }
            );
        }
        if (this.btn_prev!= null) {
            this.btn_prev.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    STTQuestionsFragment_.this.gotoPrevPage();
                }
            }
            );
        }
        if (this.submit!= null) {
            this.submit.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    STTQuestionsFragment_.this.submitTest();
                }
            }
            );
        }
        if (this.btn_next!= null) {
            this.btn_next.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    STTQuestionsFragment_.this.gotoNextPage();
                }
            }
            );
        }
        initialize();
    }

    @Override
    public void showLoader() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                STTQuestionsFragment_.super.showLoader();
            }
        }
        , 0L);
    }

    @Override
    public void dismissLoadingDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                STTQuestionsFragment_.super.dismissLoadingDialog();
            }
        }
        , 0L);
    }

    @Override
    public void setCategoryTitle(final String title) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                STTQuestionsFragment_.super.setCategoryTitle(title);
            }
        }
        , 0L);
    }

    @Override
    public void initializeContent(final int pageNo) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                STTQuestionsFragment_.super.initializeContent(pageNo);
            }
        }
        , 0L);
    }

    @Override
    public void setAnswerToView(final ArrayList<String> sttResult) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                STTQuestionsFragment_.super.setAnswerToView(sttResult);
            }
        }
        , 0L);
    }

    @Override
    public void Stt_onResult(final ArrayList<String> sttResult) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    STTQuestionsFragment_.super.Stt_onResult(sttResult);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    public static class FragmentBuilder_
        extends FragmentBuilder<STTQuestionsFragment_.FragmentBuilder_, com.pratham.foundation.ui.contentPlayer.paragraph_stt.STTQuestionsFragment>
    {

        @Override
        public com.pratham.foundation.ui.contentPlayer.paragraph_stt.STTQuestionsFragment build() {
            STTQuestionsFragment_ fragment_ = new STTQuestionsFragment_();
            fragment_.setArguments(args);
            return fragment_;
        }
    }
}
