//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.async;

import android.content.Context;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.UiThreadExecutor;
import org.json.JSONObject;

public final class PushDataToServer_
    extends PushDataToServer
{
    private Context context_;
    private Object rootFragment_;

    private PushDataToServer_(Context context) {
        super(context);
        context_ = context;
        init_();
    }

    private PushDataToServer_(Context context, Object rootFragment) {
        super(context);
        context_ = context;
        rootFragment_ = rootFragment;
        init_();
    }

    public static PushDataToServer_ getInstance_(Context context) {
        return new PushDataToServer_(context);
    }

    public static PushDataToServer_ getInstance_(Context context, Object rootFragment) {
        return new PushDataToServer_(context, rootFragment);
    }

    private void init_() {
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void pushDataToServer(final Context context, final JSONObject data, final String url) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.pushDataToServer(context, data, url);
            }
        }
        , 0L);
    }

    @Override
    public void showImgDialog(final int counter) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.showImgDialog(counter);
            }
        }
        , 0L);
    }

    @Override
    public void updateCntr(final int imgCtr) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.updateCntr(imgCtr);
            }
        }
        , 0L);
    }

    @Override
    public void dismissImageDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.dismissImageDialog();
            }
        }
        , 0L);
    }

    @Override
    public void showDataDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.showDataDialog();
            }
        }
        , 0L);
    }

    @Override
    public void dismissDataDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.dismissDataDialog();
            }
        }
        , 0L);
    }

    @Override
    public void pushImagesToServer(final int jsonIndex, final int uploadCntr) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.pushImagesToServer(jsonIndex, uploadCntr);
            }
        }
        , 0L);
    }

    @Override
    public void getFacilityId(final JSONObject requestString) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.getFacilityId(requestString);
            }
        }
        , 0L);
    }

    @Override
    public void onPostExecute() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.onPostExecute();
            }
        }
        , 0L);
    }

    @Override
    public void onPostImageExecute() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                PushDataToServer_.super.onPostImageExecute();
            }
        }
        , 0L);
    }

    @Override
    public void doInBackground(final boolean _autoPush) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    PushDataToServer_.super.doInBackground(_autoPush);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void setPushFlag() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    PushDataToServer_.super.setPushFlag();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }
}
