//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.contentPlayer.paragraph_stt;

import android.content.Context;
import org.androidannotations.api.BackgroundExecutor;

public final class STTQuestionsPresenter_
    extends STTQuestionsPresenter
{
    private Context context_;
    private Object rootFragment_;

    private STTQuestionsPresenter_(Context context) {
        super(context);
        context_ = context;
        init_();
    }

    private STTQuestionsPresenter_(Context context, Object rootFragment) {
        super(context);
        context_ = context;
        rootFragment_ = rootFragment;
        init_();
    }

    public static STTQuestionsPresenter_ getInstance_(Context context) {
        return new STTQuestionsPresenter_(context);
    }

    public static STTQuestionsPresenter_ getInstance_(Context context, Object rootFragment) {
        return new STTQuestionsPresenter_(context, rootFragment);
    }

    private void init_() {
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void setResId(final String resourceId) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    STTQuestionsPresenter_.super.setResId(resourceId);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void fetchJsonData(final String contentPath, final String jsonName) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    STTQuestionsPresenter_.super.fetchJsonData(contentPath, jsonName);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void addProgress(final String[] sttAnswers, final String[] sttAnswersTime) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    STTQuestionsPresenter_.super.addProgress(sttAnswers, sttAnswersTime);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void addScore(final int wID, final String Word, final int scoredMarks, final int totalMarks, final String resStartTime, final String Label) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    STTQuestionsPresenter_.super.addScore(wID, Word, scoredMarks, totalMarks, resStartTime, Label);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void addExitScore(final float perc, final String Label) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    STTQuestionsPresenter_.super.addExitScore(perc, Label);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }
}
