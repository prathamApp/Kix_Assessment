//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.app_home.display_content;

import android.content.Context;
import com.pratham.foundation.async.ZipDownloader_;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.UiThreadExecutor;

public final class ContentPresenter_
    extends ContentPresenter
{
    private Context context_;
    private Object rootFragment_;

    private ContentPresenter_(Context context) {
        super(context);
        context_ = context;
        init_();
    }

    private ContentPresenter_(Context context, Object rootFragment) {
        super(context);
        context_ = context;
        rootFragment_ = rootFragment;
        init_();
    }

    public static ContentPresenter_ getInstance_(Context context) {
        return new ContentPresenter_(context);
    }

    public static ContentPresenter_ getInstance_(Context context, Object rootFragment) {
        return new ContentPresenter_(context, rootFragment);
    }

    private void init_() {
        this.zipDownloader = ZipDownloader_.getInstance_(context_, rootFragment_);
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void updateUI() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentPresenter_.super.updateUI();
            }
        }
        , 0L);
    }

    @Override
    public void displayProfileImage() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ContentPresenter_.super.displayProfileImage();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void getPerc(final String nodeId) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ContentPresenter_.super.getPerc(nodeId);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void addNodeIdToList(final String nodeId) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ContentPresenter_.super.addNodeIdToList(nodeId);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void getListData() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ContentPresenter_.super.getListData();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void starContentEntry(final String contentID, final String Label) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ContentPresenter_.super.starContentEntry(contentID, Label);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }
}
