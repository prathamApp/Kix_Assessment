//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.contentPlayer.chit_chat.level_2;

import java.util.ArrayList;
import android.content.Context;
import org.androidannotations.api.BackgroundExecutor;

public final class ConversationPresenter_2_
    extends ConversationPresenter_2
{
    private Context context_;
    private Object rootFragment_;

    private ConversationPresenter_2_(Context context) {
        super(context);
        context_ = context;
        init_();
    }

    private ConversationPresenter_2_(Context context, Object rootFragment) {
        super(context);
        context_ = context;
        rootFragment_ = rootFragment;
        init_();
    }

    public static ConversationPresenter_2_ getInstance_(Context context) {
        return new ConversationPresenter_2_(context);
    }

    public static ConversationPresenter_2_ getInstance_(Context context, Object rootFragment) {
        return new ConversationPresenter_2_(context, rootFragment);
    }

    private void init_() {
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void fetchStory(final String convoPath) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ConversationPresenter_2_.super.fetchStory(convoPath);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void sttResultProcess(final ArrayList<String> sttServerResult, final String answer) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ConversationPresenter_2_.super.sttResultProcess(sttServerResult, answer);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void addCompletion(final float perc) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ConversationPresenter_2_.super.addCompletion(perc);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void addScore(final int wID, final String Word, final int scoredMarks, final int totalMarks, final String Label) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ConversationPresenter_2_.super.addScore(wID, Word, scoredMarks, totalMarks, Label);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }
}
