//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.app_home;

import java.util.HashMap;
import java.util.Map;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import com.pratham.foundation.R;
import com.pratham.foundation.async.ContentDownloadingTask_;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.UiThreadExecutor;
import org.androidannotations.api.bean.BeanHolder;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.builder.PostActivityStarter;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

@SuppressLint({
    "StaticFieldLeak"
})
public final class HomeActivity_
    extends HomeActivity
    implements BeanHolder, HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private final Map<Class<?> , Object> beans_ = new HashMap<Class<?> , Object>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(R.layout.activity_home);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T) this.findViewById(id));
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.homeHeader0 = ContextCompat.getDrawable(this, R.drawable.home_header_0_bg);
        this.homeHeader1 = ContextCompat.getDrawable(this, R.drawable.home_header_1_bg);
        this.homeHeader2 = ContextCompat.getDrawable(this, R.drawable.home_header_2_bg);
        this.homeHeader3 = ContextCompat.getDrawable(this, R.drawable.home_header_3_bg);
        this.homeHeader4 = ContextCompat.getDrawable(this, R.drawable.home_header_4_bg);
        this.contentDownloadingTask = ContentDownloadingTask_.getInstance_(this, null);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static HomeActivity_.IntentBuilder_ intent(Context context) {
        return new HomeActivity_.IntentBuilder_(context);
    }

    public static HomeActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new HomeActivity_.IntentBuilder_(fragment);
    }

    public static HomeActivity_.IntentBuilder_ intent(androidx.fragment.app.Fragment supportFragment) {
        return new HomeActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public<T> T getBean(Class<T> key) {
        return ((T) beans_.get(key));
    }

    @Override
    public<T> void putBean(Class<T> key, T value) {
        beans_.put(key, value);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.tv_header_progress = hasViews.internalFindViewById(R.id.tv_header_progress);
        this.viewpager = hasViews.internalFindViewById(R.id.viewpager);
        this.home_root_layout = hasViews.internalFindViewById(R.id.home_root_layout);
        this.tv_Topic = hasViews.internalFindViewById(R.id.tv_Topic);
        this.tv_Activity = hasViews.internalFindViewById(R.id.tv_Activity);
        this.tabLayout = hasViews.internalFindViewById(R.id.tabLayout);
        this.header_rl = hasViews.internalFindViewById(R.id.header_rl);
        this.submarine = hasViews.internalFindViewById(R.id.submarine);
        this.iv_level = hasViews.internalFindViewById(R.id.iv_level);
        this.tv_level = hasViews.internalFindViewById(R.id.tv_level);
        this.profileImage = hasViews.internalFindViewById(R.id.profileImage);
        this.main_back = hasViews.internalFindViewById(R.id.main_back);
        this.floating_info = hasViews.internalFindViewById(R.id.floating_info);
        if (this.iv_level!= null) {
            this.iv_level.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    HomeActivity_.this.levelChange();
                }
            }
            );
        }
        if (this.tv_level!= null) {
            this.tv_level.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    HomeActivity_.this.levelChange();
                }
            }
            );
        }
        if (this.main_back!= null) {
            this.main_back.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    HomeActivity_.this.backBtnPressed();
                }
            }
            );
        }
        initialize();
    }

    @Override
    public void setShowcaseView() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                HomeActivity_.super.setShowcaseView();
            }
        }
        , 0L);
    }

    @Override
    public void showLoader() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                HomeActivity_.super.showLoader();
            }
        }
        , 0L);
    }

    @Override
    public void dismissLoadingDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                HomeActivity_.super.dismissLoadingDialog();
            }
        }
        , 0L);
    }

    @Override
    public void setProfileName(final String profileName) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                HomeActivity_.super.setProfileName(profileName);
            }
        }
        , 0L);
    }

    @Override
    public void setLevel() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                HomeActivity_.super.setLevel();
            }
        }
        , 0L);
    }

    @SuppressLint({
        "SetTextI18n"
    })
    @Override
    void showComingSoonDia() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                HomeActivity_.super.showComingSoonDia();
            }
        }
        , 0L);
    }

    @Override
    public void displayProfileName() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    HomeActivity_.super.displayProfileName();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @SuppressLint({
        "StaticFieldLeak"
    })
    @Override
    public void endSession() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    HomeActivity_.super.endSession();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<HomeActivity_.IntentBuilder_>
    {
        private android.app.Fragment fragment_;
        private androidx.fragment.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, HomeActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            super(fragment.getActivity(), HomeActivity_.class);
            fragment_ = fragment;
        }

        public IntentBuilder_(androidx.fragment.app.Fragment fragment) {
            super(fragment.getActivity(), HomeActivity_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public PostActivityStarter startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent, requestCode, lastOptions);
                } else {
                    if (context instanceof Activity) {
                        Activity activity = ((Activity) context);
                        ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
                    } else {
                        context.startActivity(intent, lastOptions);
                    }
                }
            }
            return new PostActivityStarter(context);
        }
    }
}
