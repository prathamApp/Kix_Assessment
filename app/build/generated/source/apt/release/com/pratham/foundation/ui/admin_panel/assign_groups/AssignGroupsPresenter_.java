//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.admin_panel.assign_groups;

import android.annotation.SuppressLint;
import android.content.Context;
import org.androidannotations.api.BackgroundExecutor;

public final class AssignGroupsPresenter_
    extends AssignGroupsPresenter
{
    private Context context_;
    private Object rootFragment_;

    private AssignGroupsPresenter_(Context context) {
        super(context);
        context_ = context;
        init_();
    }

    private AssignGroupsPresenter_(Context context, Object rootFragment) {
        super(context);
        context_ = context;
        rootFragment_ = rootFragment;
        init_();
    }

    public static AssignGroupsPresenter_ getInstance_(Context context) {
        return new AssignGroupsPresenter_(context);
    }

    public static AssignGroupsPresenter_ getInstance_(Context context, Object rootFragment) {
        return new AssignGroupsPresenter_(context, rootFragment);
    }

    private void init_() {
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void initializeStatesSpinner() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    AssignGroupsPresenter_.super.initializeStatesSpinner();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void getProgramWiseSpinners() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    AssignGroupsPresenter_.super.getProgramWiseSpinners();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void getBlockData(final String selectedState) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    AssignGroupsPresenter_.super.getBlockData(selectedState);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void fetchVillageData(final String selectedBlock) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    AssignGroupsPresenter_.super.fetchVillageData(selectedBlock);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void getAllGroups(final int vilID) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    AssignGroupsPresenter_.super.getAllGroups(vilID);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void fetchRIVillage(final String selectedBlock) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    AssignGroupsPresenter_.super.fetchRIVillage(selectedBlock);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @SuppressLint({
        "HardwareIds"
    })
    @Override
    public void updateDBData(final String group1, final String group2, final String group3, final String group4, final String group5, final int vilID) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    AssignGroupsPresenter_.super.updateDBData(group1, group2, group3, group4, group5, vilID);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }
}
