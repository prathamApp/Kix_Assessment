//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.app_home.learning_fragment;

import java.util.List;
import android.content.Context;
import com.pratham.foundation.async.ZipDownloader_;
import com.pratham.foundation.database.domain.ContentTable;
import org.androidannotations.api.BackgroundExecutor;

public final class LearningPresenter_
    extends LearningPresenter
{
    private Context context_;
    private Object rootFragment_;

    private LearningPresenter_(Context context) {
        super(context);
        context_ = context;
        init_();
    }

    private LearningPresenter_(Context context, Object rootFragment) {
        super(context);
        context_ = context;
        rootFragment_ = rootFragment;
        init_();
    }

    public static LearningPresenter_ getInstance_(Context context) {
        return new LearningPresenter_(context);
    }

    public static LearningPresenter_ getInstance_(Context context, Object rootFragment) {
        return new LearningPresenter_(context, rootFragment);
    }

    private void init_() {
        this.zipDownloader = ZipDownloader_.getInstance_(context_, rootFragment_);
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void getBottomNavId(final int currentLevelNo, final String cosSection) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.getBottomNavId(currentLevelNo, cosSection);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void getRootData(final String rootID) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.getRootData(rootID);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void getLevelDataForList(final int currentLevelNo, final String bottomNavNodeId) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.getLevelDataForList(currentLevelNo, bottomNavNodeId);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void findMaxScore(final String nodeId) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.findMaxScore(nodeId);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void getWholePercentage(final List maxScore) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.getWholePercentage(maxScore);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void getDataForList() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.getDataForList();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void updateDownloadJson(final String folderPath) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.updateDownloadJson(folderPath);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void updateCurrentNode(final ContentTable contentTable) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.updateCurrentNode(contentTable);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void receivedContent(final String header, final String response) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.receivedContent(header, response);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void updateDownloads() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    LearningPresenter_.super.updateDownloads();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }
}
