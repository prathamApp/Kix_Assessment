//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.contentPlayer.pictionary;

import java.util.HashMap;
import java.util.Map;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import com.pratham.foundation.R;
import org.androidannotations.api.bean.BeanHolder;
import org.androidannotations.api.builder.FragmentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class pictionaryFragment_
    extends com.pratham.foundation.ui.contentPlayer.pictionary.pictionaryFragment
    implements BeanHolder, HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private final Map<Class<?> , Object> beans_ = new HashMap<Class<?> , Object>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T)((contentView_ == null)?null:contentView_.findViewById(id)));
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(R.layout.layout_mcq_fill_in_the_blanks_with_options_row, container, false);
        }
        return contentView_;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        contentView_ = null;
        question = null;
        questionImage = null;
        questionGif = null;
        radioGroupMcq = null;
        gridMcq = null;
        previous = null;
        submitBtn = null;
        next = null;
        show_answer = null;
        image_container = null;
        iv_view_img = null;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.presenter = PictionaryPresenter_.getInstance_(getActivity(), this);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static pictionaryFragment_.FragmentBuilder_ builder() {
        return new pictionaryFragment_.FragmentBuilder_();
    }

    @Override
    public<T> T getBean(Class<T> key) {
        return ((T) beans_.get(key));
    }

    @Override
    public<T> void putBean(Class<T> key, T value) {
        beans_.put(key, value);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.question = hasViews.internalFindViewById(R.id.tv_question);
        this.questionImage = hasViews.internalFindViewById(R.id.iv_question_image);
        this.questionGif = hasViews.internalFindViewById(R.id.iv_question_gif);
        this.radioGroupMcq = hasViews.internalFindViewById(R.id.rg_mcq);
        this.gridMcq = hasViews.internalFindViewById(R.id.grid_mcq);
        this.previous = hasViews.internalFindViewById(R.id.btn_prev);
        this.submitBtn = hasViews.internalFindViewById(R.id.btn_submit);
        this.next = hasViews.internalFindViewById(R.id.btn_next);
        this.show_answer = hasViews.internalFindViewById(R.id.show_answer);
        this.image_container = hasViews.internalFindViewById(R.id.image_container);
        this.iv_view_img = hasViews.internalFindViewById(R.id.iv_view_img);
        if (this.previous!= null) {
            this.previous.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    pictionaryFragment_.this.onPreviousClick();
                }
            }
            );
        }
        if (this.next!= null) {
            this.next.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    pictionaryFragment_.this.onNextClick();
                }
            }
            );
        }
        if (this.submitBtn!= null) {
            this.submitBtn.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    pictionaryFragment_.this.onsubmitBtnClick();
                }
            }
            );
        }
        if (this.show_answer!= null) {
            this.show_answer.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    pictionaryFragment_.this.showAnswer();
                }
            }
            );
        }
        initiate();
    }

    public static class FragmentBuilder_
        extends FragmentBuilder<pictionaryFragment_.FragmentBuilder_, com.pratham.foundation.ui.contentPlayer.pictionary.pictionaryFragment>
    {

        @Override
        public com.pratham.foundation.ui.contentPlayer.pictionary.pictionaryFragment build() {
            pictionaryFragment_ fragment_ = new pictionaryFragment_();
            fragment_.setArguments(args);
            return fragment_;
        }
    }
}
