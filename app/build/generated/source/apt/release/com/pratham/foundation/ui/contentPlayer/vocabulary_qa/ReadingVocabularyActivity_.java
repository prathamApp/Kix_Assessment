//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.contentPlayer.vocabulary_qa;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import androidx.core.app.ActivityCompat;
import com.pratham.foundation.R;
import com.pratham.foundation.modalclasses.ModalVocabulary;
import org.androidannotations.api.UiThreadExecutor;
import org.androidannotations.api.bean.BeanHolder;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.builder.PostActivityStarter;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class ReadingVocabularyActivity_
    extends ReadingVocabularyActivity
    implements BeanHolder, HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private final Map<Class<?> , Object> beans_ = new HashMap<Class<?> , Object>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(R.layout.activity_vocabulary_reading);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T) this.findViewById(id));
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.presenter = ReadingVocabularyPresenter_.getInstance_(this, null);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ReadingVocabularyActivity_.IntentBuilder_ intent(Context context) {
        return new ReadingVocabularyActivity_.IntentBuilder_(context);
    }

    public static ReadingVocabularyActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new ReadingVocabularyActivity_.IntentBuilder_(fragment);
    }

    public static ReadingVocabularyActivity_.IntentBuilder_ intent(androidx.fragment.app.Fragment supportFragment) {
        return new ReadingVocabularyActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public<T> T getBean(Class<T> key) {
        return ((T) beans_.get(key));
    }

    @Override
    public<T> void putBean(Class<T> key, T value) {
        beans_.put(key, value);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.ll_convo_main = hasViews.internalFindViewById(R.id.ll_convo_main);
        this.recyclerView = hasViews.internalFindViewById(R.id.recyclerView);
        this.vocabChatFlow = hasViews.internalFindViewById(R.id.vocabChatFlow);
        this.scroll_ll = hasViews.internalFindViewById(R.id.scroll_ll);
        this.btn_reading = hasViews.internalFindViewById(R.id.btn_reading);
        this.btn_imgsend = hasViews.internalFindViewById(R.id.btn_imgsend);
        this.tv_title = hasViews.internalFindViewById(R.id.tv_title);
        this.lin_layout = hasViews.internalFindViewById(R.id.lin_layout);
        this.content_image = hasViews.internalFindViewById(R.id.content_image);
        this.this_image = hasViews.internalFindViewById(R.id.this_image);
        this.that_image = hasViews.internalFindViewById(R.id.that_image);
        this.btn_speaker = hasViews.internalFindViewById(R.id.btn_speaker);
        this.btn_prev = hasViews.internalFindViewById(R.id.btn_prev);
        this.btn_next = hasViews.internalFindViewById(R.id.btn_next);
        this.floating_back = hasViews.internalFindViewById(R.id.floating_back);
        this.floating_info = hasViews.internalFindViewById(R.id.floating_info);
        this.silence_outer_layout = hasViews.internalFindViewById(R.id.silence_outer);
        this.silence_main_layout = hasViews.internalFindViewById(R.id.silence_main_layout);
        this.silence_iv = hasViews.internalFindViewById(R.id.silence_iv);
        if (this.btn_imgsend!= null) {
            this.btn_imgsend.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ReadingVocabularyActivity_.this.sendMessage();
                }
            }
            );
        }
        if (this.btn_reading!= null) {
            this.btn_reading.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ReadingVocabularyActivity_.this.startReading();
                }
            }
            );
        }
        if (this.btn_next!= null) {
            this.btn_next.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ReadingVocabularyActivity_.this.nextBtnPressed();
                }
            }
            );
        }
        if (this.btn_prev!= null) {
            this.btn_prev.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ReadingVocabularyActivity_.this.prevBtnPressed();
                }
            }
            );
        }
        if (this.btn_speaker!= null) {
            this.btn_speaker.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ReadingVocabularyActivity_.this.chatAnswer();
                }
            }
            );
        }
        if (this.floating_back!= null) {
            this.floating_back.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ReadingVocabularyActivity_.this.pressedBackBtn();
                }
            }
            );
        }
        initialize();
    }

    @Override
    public void setListData(final List<ModalVocabulary> wordsDataList) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ReadingVocabularyActivity_.super.setListData(wordsDataList);
            }
        }
        , 0L);
    }

    @Override
    public void startAudioReading(final String audioFilePath, final String ansStr) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ReadingVocabularyActivity_.super.startAudioReading(audioFilePath, ansStr);
            }
        }
        , 0L);
    }

    @Override
    public void showLoader() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ReadingVocabularyActivity_.super.showLoader();
            }
        }
        , 0L);
    }

    @Override
    public void dismissLoadingDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ReadingVocabularyActivity_.super.dismissLoadingDialog();
            }
        }
        , 0L);
    }

    @Override
    public void setCorrectViewColor() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ReadingVocabularyActivity_.super.setCorrectViewColor();
            }
        }
        , 0L);
    }

    @Override
    public void chatAnswer() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ReadingVocabularyActivity_.super.chatAnswer();
            }
        }
        , 0L);
    }

    @Override
    public void startAudioReading(final String audioFilePath) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ReadingVocabularyActivity_.super.startAudioReading(audioFilePath);
            }
        }
        , 0L);
    }

    @Override
    public void sendClikChanger(final int clickOn) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ReadingVocabularyActivity_.super.sendClikChanger(clickOn);
            }
        }
        , 0L);
    }

    @Override
    public void allCorrectAnswer() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ReadingVocabularyActivity_.super.allCorrectAnswer();
            }
        }
        , 0L);
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<ReadingVocabularyActivity_.IntentBuilder_>
    {
        private android.app.Fragment fragment_;
        private androidx.fragment.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, ReadingVocabularyActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            super(fragment.getActivity(), ReadingVocabularyActivity_.class);
            fragment_ = fragment;
        }

        public IntentBuilder_(androidx.fragment.app.Fragment fragment) {
            super(fragment.getActivity(), ReadingVocabularyActivity_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public PostActivityStarter startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent, requestCode, lastOptions);
                } else {
                    if (context instanceof Activity) {
                        Activity activity = ((Activity) context);
                        ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
                    } else {
                        context.startActivity(intent, lastOptions);
                    }
                }
            }
            return new PostActivityStarter(context);
        }
    }
}
