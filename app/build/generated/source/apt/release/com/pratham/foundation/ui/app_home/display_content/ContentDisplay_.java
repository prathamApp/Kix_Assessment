//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.app_home.display_content;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import com.pratham.foundation.R;
import com.pratham.foundation.database.domain.ContentTable;
import com.pratham.foundation.database.domain.Groups;
import com.pratham.foundation.modalclasses.Modal_FileDownloading;
import org.androidannotations.api.UiThreadExecutor;
import org.androidannotations.api.bean.BeanHolder;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.builder.PostActivityStarter;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class ContentDisplay_
    extends ContentDisplay
    implements BeanHolder, HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private final Map<Class<?> , Object> beans_ = new HashMap<Class<?> , Object>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(R.layout.activity_content_display);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T) this.findViewById(id));
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.homeHeader0 = ContextCompat.getDrawable(this, R.drawable.home_header_0_bg);
        this.homeHeader1 = ContextCompat.getDrawable(this, R.drawable.home_header_1_bg);
        this.homeHeader2 = ContextCompat.getDrawable(this, R.drawable.home_header_2_bg);
        this.homeHeader3 = ContextCompat.getDrawable(this, R.drawable.home_header_3_bg);
        this.homeHeader4 = ContextCompat.getDrawable(this, R.drawable.home_header_4_bg);
        this.presenter = ContentPresenter_.getInstance_(this, null);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ContentDisplay_.IntentBuilder_ intent(Context context) {
        return new ContentDisplay_.IntentBuilder_(context);
    }

    public static ContentDisplay_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new ContentDisplay_.IntentBuilder_(fragment);
    }

    public static ContentDisplay_.IntentBuilder_ intent(androidx.fragment.app.Fragment supportFragment) {
        return new ContentDisplay_.IntentBuilder_(supportFragment);
    }

    @Override
    public<T> T getBean(Class<T> key) {
        return ((T) beans_.get(key));
    }

    @Override
    public<T> void putBean(Class<T> key, T value) {
        beans_.put(key, value);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.tv_header_progress = hasViews.internalFindViewById(R.id.tv_header_progress);
        this.tv_Topic = hasViews.internalFindViewById(R.id.tv_Topic);
        this.tv_Activity = hasViews.internalFindViewById(R.id.tv_Activity);
        this.ll_topic_parent = hasViews.internalFindViewById(R.id.ll_topic_parent);
        this.iv_level = hasViews.internalFindViewById(R.id.iv_level);
        this.tv_level = hasViews.internalFindViewById(R.id.tv_level);
        this.homeRoot = hasViews.internalFindViewById(R.id.home_root_layout);
        this.header_rl = hasViews.internalFindViewById(R.id.header_rl);
        this.main_back = hasViews.internalFindViewById(R.id.main_back);
        View view_profileImage = hasViews.internalFindViewById(R.id.profileImage);

        if (view_profileImage!= null) {
            view_profileImage.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ContentDisplay_.this.loadProfile();
                }
            }
            );
        }
        if (this.main_back!= null) {
            this.main_back.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ContentDisplay_.this.backClicked();
                }
            }
            );
        }
        initialize();
    }

    @Override
    public void setStudentProfileImage(final String sImage) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.setStudentProfileImage(sImage);
            }
        }
        , 0L);
    }

    @Override
    public void setHeaderProgress(final int percent) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.setHeaderProgress(percent);
            }
        }
        , 0L);
    }

    @Override
    public void addContentToViewList(final List<ContentTable> contentTable) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.addContentToViewList(contentTable);
            }
        }
        , 0L);
    }

    @Override
    public void notifyAdapter() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.notifyAdapter();
            }
        }
        , 0L);
    }

    @SuppressLint({
        "SetTextI18n"
    })
    @Override
    public void showNoDataDownloadedDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.showNoDataDownloadedDialog();
            }
        }
        , 0L);
    }

    @Override
    public void openAttendanceDialog(final List<Groups> groupsList) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.openAttendanceDialog(groupsList);
            }
        }
        , 0L);
    }

    @SuppressLint({
        "SetTextI18n"
    })
    @Override
    public void downloadAssessmentAppDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.downloadAssessmentAppDialog();
            }
        }
        , 0L);
    }

    @Override
    public void onPreResOpenClicked(final int position, final String nId, final String title, final boolean onSDCard) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.onPreResOpenClicked(position, nId, title, onSDCard);
            }
        }
        , 0L);
    }

    @SuppressLint({
        "SetTextI18n"
    })
    @Override
    public void showChangeDateDialog(final String newDate, final String sTime) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.showChangeDateDialog(newDate, sTime);
            }
        }
        , 0L);
    }

    @Override
    public void notifyAdapterItem(final int deletePos) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.notifyAdapterItem(deletePos);
            }
        }
        , 0L);
    }

    @SuppressLint({
        "SetTextI18n"
    })
    @Override
    public void resourceDownloadDialog(final Modal_FileDownloading modal_fileDownloading) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.resourceDownloadDialog(modal_fileDownloading);
            }
        }
        , 0L);
    }

    @Override
    public void dismissDownloadDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.dismissDownloadDialog();
            }
        }
        , 0L);
    }

    @Override
    public void showZipLoader() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.showZipLoader();
            }
        }
        , 0L);
    }

    @Override
    public void showLoader() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.showLoader();
            }
        }
        , 0L);
    }

    @Override
    public void dismissLoadingDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.dismissLoadingDialog();
            }
        }
        , 0L);
    }

    @Override
    public void showToast(final String msg) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.showToast(msg);
            }
        }
        , 0L);
    }

    @Override
    public void showDownloadErrorDialog() {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ContentDisplay_.super.showDownloadErrorDialog();
            }
        }
        , 0L);
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<ContentDisplay_.IntentBuilder_>
    {
        private android.app.Fragment fragment_;
        private androidx.fragment.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, ContentDisplay_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            super(fragment.getActivity(), ContentDisplay_.class);
            fragment_ = fragment;
        }

        public IntentBuilder_(androidx.fragment.app.Fragment fragment) {
            super(fragment.getActivity(), ContentDisplay_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public PostActivityStarter startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent, requestCode, lastOptions);
                } else {
                    if (context instanceof Activity) {
                        Activity activity = ((Activity) context);
                        ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
                    } else {
                        context.startActivity(intent, lastOptions);
                    }
                }
            }
            return new PostActivityStarter(context);
        }
    }
}
