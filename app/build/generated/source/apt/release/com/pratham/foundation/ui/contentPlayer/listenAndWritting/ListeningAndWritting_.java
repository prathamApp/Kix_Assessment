//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.contentPlayer.listenAndWritting;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import com.pratham.foundation.R;
import com.pratham.foundation.modalclasses.ScienceQuestion;
import org.androidannotations.api.UiThreadExecutor;
import org.androidannotations.api.bean.BeanHolder;
import org.androidannotations.api.builder.FragmentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class ListeningAndWritting_
    extends com.pratham.foundation.ui.contentPlayer.listenAndWritting.ListeningAndWritting
    implements BeanHolder, HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private final Map<Class<?> , Object> beans_ = new HashMap<Class<?> , Object>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T)((contentView_ == null)?null:contentView_.findViewById(id)));
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(R.layout.fragment_list_and_writting, container, false);
        }
        return contentView_;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        contentView_ = null;
        play = null;
        capture = null;
        previous = null;
        show_answer = null;
        camera_controll = null;
        next = null;
        preview = null;
        count = null;
        submitBtn = null;
        discreteSlider = null;
        tickMarkLabelsRelativeLayout = null;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.presenter = ListeningAndWrittingPresenterImp_.getInstance_(getActivity(), this);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ListeningAndWritting_.FragmentBuilder_ builder() {
        return new ListeningAndWritting_.FragmentBuilder_();
    }

    @Override
    public<T> T getBean(Class<T> key) {
        return ((T) beans_.get(key));
    }

    @Override
    public<T> void putBean(Class<T> key, T value) {
        beans_.put(key, value);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.play = hasViews.internalFindViewById(R.id.play_button);
        this.capture = hasViews.internalFindViewById(R.id.capture);
        this.previous = hasViews.internalFindViewById(R.id.previous);
        this.show_answer = hasViews.internalFindViewById(R.id.show_answer);
        this.camera_controll = hasViews.internalFindViewById(R.id.camera_controll);
        this.next = hasViews.internalFindViewById(R.id.next);
        this.preview = hasViews.internalFindViewById(R.id.preview);
        this.count = hasViews.internalFindViewById(R.id.count);
        this.submitBtn = hasViews.internalFindViewById(R.id.submit);
        this.discreteSlider = hasViews.internalFindViewById(R.id.discrete_slider);
        this.tickMarkLabelsRelativeLayout = hasViews.internalFindViewById(R.id.tick_mark_labels_rl);
        View view_replay = hasViews.internalFindViewById(R.id.replay);

        if (this.show_answer!= null) {
            this.show_answer.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ListeningAndWritting_.this.showAnswer();
                }
            }
            );
        }
        if (this.play!= null) {
            this.play.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ListeningAndWritting_.this.onPlayClick();
                }
            }
            );
        }
        if (view_replay!= null) {
            view_replay.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ListeningAndWritting_.this.replay();
                }
            }
            );
        }
        if (this.capture!= null) {
            this.capture.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ListeningAndWritting_.this.captureClick();
                }
            }
            );
        }
        if (this.preview!= null) {
            this.preview.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ListeningAndWritting_.this.previewClick();
                }
            }
            );
        }
        if (this.submitBtn!= null) {
            this.submitBtn.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ListeningAndWritting_.this.submitClick();
                }
            }
            );
        }
        if (this.previous!= null) {
            this.previous.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ListeningAndWritting_.this.onPreviousClick();
                }
            }
            );
        }
        if (this.next!= null) {
            this.next.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    ListeningAndWritting_.this.onNextClick();
                }
            }
            );
        }
        initiate();
    }

    @Override
    public void loadUI(final List<ScienceQuestion> listenAndWrittingModal) {
        UiThreadExecutor.runTask("", new Runnable() {

            @Override
            public void run() {
                ListeningAndWritting_.super.loadUI(listenAndWrittingModal);
            }
        }
        , 0L);
    }

    public static class FragmentBuilder_
        extends FragmentBuilder<ListeningAndWritting_.FragmentBuilder_, com.pratham.foundation.ui.contentPlayer.listenAndWritting.ListeningAndWritting>
    {

        @Override
        public com.pratham.foundation.ui.contentPlayer.listenAndWritting.ListeningAndWritting build() {
            ListeningAndWritting_ fragment_ = new ListeningAndWritting_();
            fragment_.setArguments(args);
            return fragment_;
        }
    }
}
