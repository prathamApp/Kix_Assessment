//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.async;

import android.content.Context;
import com.pratham.foundation.modalclasses.Modal_Download;
import org.androidannotations.api.BackgroundExecutor;

public final class ContentDownloadingTask_
    extends ContentDownloadingTask
{
    private Context context_;
    private Object rootFragment_;

    private ContentDownloadingTask_(Context context) {
        super(context);
        context_ = context;
        init_();
    }

    private ContentDownloadingTask_(Context context, Object rootFragment) {
        super(context);
        context_ = context;
        rootFragment_ = rootFragment;
        init_();
    }

    public static ContentDownloadingTask_ getInstance_(Context context) {
        return new ContentDownloadingTask_(context);
    }

    public static ContentDownloadingTask_ getInstance_(Context context, Object rootFragment) {
        return new ContentDownloadingTask_(context, rootFragment);
    }

    private void init_() {
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void startContentDownload(final Modal_Download download, final boolean unzipFlg) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ContentDownloadingTask_.super.startContentDownload(download, unzipFlg);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @Override
    public void downloadCompleted() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    ContentDownloadingTask_.super.downloadCompleted();
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }
}
