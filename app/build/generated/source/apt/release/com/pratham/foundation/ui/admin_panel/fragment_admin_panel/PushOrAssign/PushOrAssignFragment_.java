//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.7.0.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.pratham.foundation.ui.admin_panel.fragment_admin_panel.PushOrAssign;

import java.util.HashMap;
import java.util.Map;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import com.pratham.foundation.R;
import com.pratham.foundation.async.PushDataToServer_New_;
import org.androidannotations.api.bean.BeanHolder;
import org.androidannotations.api.builder.FragmentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class PushOrAssignFragment_
    extends com.pratham.foundation.ui.admin_panel.fragment_admin_panel.PushOrAssign.PushOrAssignFragment
    implements BeanHolder, HasViews, OnViewChangedListener
{
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    private final Map<Class<?> , Object> beans_ = new HashMap<Class<?> , Object>();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
        return ((T)((contentView_ == null)?null:contentView_.findViewById(id)));
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(R.layout.fragment_push_or_assign, container, false);
        }
        return contentView_;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        contentView_ = null;
        assign = null;
        push = null;
        btn_progress = null;
        btn_Usage = null;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        this.pushDataToServer = PushDataToServer_New_.getInstance_(getActivity(), this);
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static PushOrAssignFragment_.FragmentBuilder_ builder() {
        return new PushOrAssignFragment_.FragmentBuilder_();
    }

    @Override
    public<T> T getBean(Class<T> key) {
        return ((T) beans_.get(key));
    }

    @Override
    public<T> void putBean(Class<T> key, T value) {
        beans_.put(key, value);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        this.assign = hasViews.internalFindViewById(R.id.btn_assign);
        this.push = hasViews.internalFindViewById(R.id.btn_push);
        this.btn_progress = hasViews.internalFindViewById(R.id.btn_progress);
        this.btn_Usage = hasViews.internalFindViewById(R.id.btn_Usage);
        View view_btn_download_all_data = hasViews.internalFindViewById(R.id.btn_download_all_data);
        View view_btn_back = hasViews.internalFindViewById(R.id.btn_back);

        if (this.assign!= null) {
            this.assign.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    PushOrAssignFragment_.this.onAssignClick();
                }
            }
            );
        }
        if (this.push!= null) {
            this.push.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    PushOrAssignFragment_.this.onPushClick();
                }
            }
            );
        }
        if (this.btn_Usage!= null) {
            this.btn_Usage.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    PushOrAssignFragment_.this.viewTabUsage();
                }
            }
            );
        }
        if (view_btn_download_all_data!= null) {
            view_btn_download_all_data.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    PushOrAssignFragment_.this.onBtnDownload();
                }
            }
            );
        }
        if (this.btn_progress!= null) {
            this.btn_progress.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    PushOrAssignFragment_.this.fetchStudentProgress();
                }
            }
            );
        }
        if (view_btn_back!= null) {
            view_btn_back.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View view) {
                    PushOrAssignFragment_.this.pressedBackButton();
                }
            }
            );
        }
        initialize();
    }

    public static class FragmentBuilder_
        extends FragmentBuilder<PushOrAssignFragment_.FragmentBuilder_, com.pratham.foundation.ui.admin_panel.fragment_admin_panel.PushOrAssign.PushOrAssignFragment>
    {

        @Override
        public com.pratham.foundation.ui.admin_panel.fragment_admin_panel.PushOrAssign.PushOrAssignFragment build() {
            PushOrAssignFragment_ fragment_ = new PushOrAssignFragment_();
            fragment_.setArguments(args);
            return fragment_;
        }
    }
}
